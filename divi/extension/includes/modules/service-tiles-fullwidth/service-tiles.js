jQuery(document).ready(function($) {
    var __$currentRow = null;
    
	/*
        Generated by CoffeeScript 1.4.0
        eqHeight.coffee v1.2.3
        http://jsliang.github.com/eqHeight.coffee

        Copyright (c) 2013, Jui-Shan Liang <jenny@jsliang.com>
        All rights reserved.
        Licensed under GPL v2.
	*/
    $.fn.extend({
        eqHeight: function (column_selector) {
            return this.each(function () {
                var columns, equalizer, _equalize_marked_columns;
                columns = $(this).find(column_selector);
                if (columns.length === 0) {
                    columns = $(this).children(column_selector);
                }
                if (columns.length === 0) {
                    return;
                }
                _equalize_marked_columns = function () {
                    var marked_columns, max_col_height;
                    marked_columns = $(".eqHeight_row");
                    max_col_height = 0;
                    marked_columns.each(function () {
                        if ($(this).height() > max_col_height) {
                            return max_col_height = $(this).height();
                        }
                    });
                    marked_columns.height(max_col_height);
                    return $(".eqHeight_row").removeClass("eqHeight_row");
                };
                equalizer = function () {
                    var row_top_value;
                    columns.height("auto");
                    row_top_value = columns.first().position().top;
                    columns.each(function () {
                        var current_top;
                        current_top = $(this).position().top;
                        if (current_top !== row_top_value) {
                            _equalize_marked_columns();
                            row_top_value = $(this).position().top;
                        }
                        return $(this).addClass("eqHeight_row");
                    });
                    return _equalize_marked_columns();
                };
                $(window).on("load", equalizer);
                return $(window).on("resize", equalizer);
            });
        }
    });

    // Create the needed js event listeners, set up classes, etc
    $('.service-group').each(initServiceGroup);

    function initServiceGroup() {
        // Define variables
        var $service = $(this);
        var $items = $service.find('.service-tile');
    
    
        $service.find('.service-tile-empty').on('click', function (e) {
            e.stopPropagation();
            var url = $(this).attr("data-url");
            window.location = url;
        });
    
        initTiles($service, $items);
    
        $(window).on('resize', function () {
            var newWidth = $(window).width();
            if (newWidth !== cachedWidth || undefined == cachedWidth ) {
                //DO RESIZE HERE
                if (__$currentRow) {
                    shrinkAndRemove(__$currentRow);
                }
                initTiles($service, $items);
    
                cachedWidth = newWidth;
            }
        });
    
        // Mobile scrolling fires a resize event
        // http://stackoverflow.com/questions/9361968/
        // http://stackoverflow.com/questions/17328742
        var cachedWidth = $(window).width();
    
        // need to align all of our tiles from the get go
        $service.eqHeight(".service-tile");
    
        // When we ajax in more content, we have
        // to make sure our heights are still correct, and we have to
        $service.on('more.new', function () {
            $service.eqHeight(".service-tile");
            $(window).trigger('resize');
            $items = $service.find('.service-tile');
            // enable interactions
            initTiles($service, $items);
        });
    
        // make sure any icons are set to the proper size
        $items.find('.icon-fallback').each(setIconFallback);
    
        // enable interactions
        initTiles($service, $items);
        setUpEvents($service);
    }

    function initTiles($service, $items) {
        //  start off with everything closed
        $items.each(function () {
            setCloseClasses($(this));
        });

        // make sure any icons are set to the proper size
        $items.find('.icon-fallback').each(setIconFallback);

        // renable the tabs and accordian plugins
        $items.find('.collapse').collapse();

        // remove any inline height set from accordian view
        $service.find('.service-tile-full .container').css({ 'height': '' });
    }

    // helper which does as it's name implies
    function setCloseClasses($item) {
        $item.attr('data-state', 'closed').removeClass('show-info');
    }

    // Sets the icons to be big and still fit within the service-tile
    function setIconFallback() {
        var width = $(this).width();
        $(this).css({
            'font-size': width * 0.6
        });
    }

    function setUpEvents($service) {

        function closeTile(e) {
            var $item = $(this);
            e.preventDefault();

            // remove the row
            var $rowEl = findRow($item);
            shrinkAndRemove($rowEl);

            // close the tile
            setCloseClasses($item);

        }

        function openTile(e) {
            var $item = $(this);
            e.preventDefault();

            // remove teasers for all others but keep this one
            // update their event handlers
            $service.find('.service-tile').not($item).each(function () {
                var $el = $(this);
                setCloseClasses($el);
            });


            // set this elements state to open
            $item.attr('data-state', 'open');

            // secure the element for holding the content and then insert it
            var $rowEl = findRow($item);

            checkIfOldAndSet($rowEl);

            insertContent($rowEl, $item);

            setCloseButtonEvent($item, closeTile);

        }


        $service.on('click', '.service-tile', function (e) {
            e.preventDefault();
            if ($(this).hasClass("touched")) {
                $(this).removeClass('touched');
                return;
            }

            var state = $(this).attr('data-state');
            switch (state) {
                case 'closed':
                case 'info':
                    openTile.call(this, e);
                    // this focues on close button after expandable panel is open, so user can tab into the pannel (it's for accessibility purposes)
                    $("button.close").trigger("focus");
                    break;
                case 'open':
                    closeTile.call(this, e);
                    break;
                default:
            }
        });


        // add the "tile-focus" class when got focus
        $('.service-tile').on("focusin", function () {
            $(this).addClass("tile-focus");

        });


        // Remove the "tile-focus" class when lost focus
        $('.service-tile').on("focusout", function () {
            $(this).removeClass("tile-focus");

        });


        // Make sure it works on 'enter' key (has same behavior as click event)
        $service.on('keyup', '.service-tile', function (e) {
            if (e.which === 13 && $(".service-tile").hasClass("tile-focus")) {
                $(this).trigger("click");
            }
        });

    }

    function findRow($item) {

        // look at the following siblings and get the first element which is
        // not on the same row
        var $nextItem = $item.nextAll('.service-tile, .service-tile-full').filter(function () {
            return $(this).offset().top !== $item.offset().top;
        }).first();

        // We have already created and inserted the required expanded element
        if ($nextItem.is('.service-tile-full')) {
            // already created the row
            return $nextItem;
        }

        // We need to insert a expanded tile here
        if ($nextItem.is('.service-tile')) {
            // we insert the required element and then return after its inserted
            return createExpandedRow($nextItem, 'before');
        }
        if ($item.nextAll('.service-tile').length) {
            return createExpandedRow($item.nextAll('.service-tile').last(), 'after');
        }
        // at this point the only other possiblity is a new row after all siblings
        return createExpandedRow($item, 'after');

    }

    function createExpandedRow($item, method) {
        var newEl = $('<div>').addClass('service-tile-full');
        $item[method](newEl);
        // HACK: trigger on focus so transitions work
        newEl.trigger("focus");
        newEl.addClass('is-open');
        return newEl;
    }

    function checkIfOldAndSet($rowEl) {
        // remove old rows if needed
        if (__$currentRow && !__$currentRow.is($rowEl)) {
            shrinkAndRemove(__$currentRow);
        }
        // set and insert our content
        __$currentRow = $rowEl;

    }

    function insertContent($rowEl, $item) {
        if (!$rowEl) {
            return;
        }
        var id = $item.data('tile-id');

        var $content = $item.parent().find('.service-tile-panel[data-tile-id="' + id + '"]').first();

        $rowEl.css('height', $rowEl.height() + "px");
        $rowEl.empty();
        $content.clone().appendTo($rowEl);
        $rowEl.animate({
            'height': $content.height() + 'px'
        }, 300, 'linear', function () {
            $rowEl.css('height', '');
            scrollToEl($item);
        });

    }

    function setCloseButtonEvent($item, func) {
        var id = $item.data('tile-id');
        var $content = $item.parent().find('.service-tile-panel[data-tile-id="' + id + '"]').first();
        $content.find('.close.btn').on('click', function (e) {
            func.call($item, e);
        });
    }

    function scrollToEl($el) {
        if (!$el || !$el.length) {
            return;
        }
        var scrollVal = $el.offset().top;
        $('html, body').animate({
            scrollTop: scrollVal
        }, 450);
    }

    function shrinkAndRemove($rowEl) {
        // Explicitly set our height so css transitions can work their magic
        // $rowEl.css('height', $rowEl.height() + 'px');
        // we wait for the next redraw so

        $rowEl.animate({
            'height': '0px'
        }, 300, 'linear', function () {
            $rowEl.empty().remove();
        });

    }
});

