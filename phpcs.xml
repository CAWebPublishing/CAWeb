<?xml version="1.0"?>
<ruleset name="WordPress Theme Coding Standards">
	<!-- See https://github.com/WordPress/WordPress-Coding-Standards -->
	<!-- See https://github.com/WordPress/WordPress-Coding-Standards/wiki -->
	<!-- See https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties -->

	<!-- See https://github.com/PHPCompatibility/PHPCompatibility -->
	<!-- See https://github.com/PHPCompatibility/PHPCompatibilityWP -->

	<!-- Set a description for this ruleset. -->
	<description>A custom set of code standard rules to check for WordPress themes.</description>

	<config name="installed_paths" value="vendor/phpcsstandards/phpcsextra,vendor/phpcsstandards/phpcsutils,vendor/wp-coding-standards/wpcs,vendor/phpcompatibility/php-compatibility,vendor/phpcompatibility/phpcompatibility-paragonie,vendor/phpcompatibility/phpcompatibility-wp" />
	
	<config name="ignore_errors_on_exit" value="1" />
	<config name="ignore_warnings_on_exit" value="1" />

	<!-- Only check the PHP, CSS and SCSS files. JS files are checked separately with JSCS and JSHint. -->
	<!--arg name="extensions" value="php,css,scss/css"/-->
	<arg name="extensions" value="php"/>

	<!-- Strip the filepaths down to the relevant bit. -->
	<arg name="basepath" value="./"/>

	<!-- Check up to 8 files simultanously. -->
	<arg name="parallel" value="8"/>

	<!-- php.ini Settings -->
    <ini name="memory_limit" value="1024M" />

	<!-- Check all files in this directory and the directories below it. -->
	<file>.</file>

	<exclude-pattern>*/.circleci/*</exclude-pattern>
    <exclude-pattern>*/images/*</exclude-pattern>
    <exclude-pattern>*/node_modules/*</exclude-pattern>
    <exclude-pattern>*/vendor/*</exclude-pattern>
	
	<!-- Set the minimum supported WP version. This is used by several sniffs.
		 The minimum version set here should be in line with the minimum WP version
		 as set in the "Requires at least" tag in the readme.txt file. -->
	<config name="minimum_wp_version" value="6.2"/>
	<config name="testVersion" value="8.2-"/>
    
	<!--
	#############################################################################
	USE THE WordPress RULESET
	#############################################################################
	-->
	<rule ref="WordPress">
		<exclude name="Generic.CodeAnalysis.UnusedFunctionParameter"/>
	</rule>

	<!--
	#############################################################################
	SNIFF SPECIFIC CONFIGURATION
	#############################################################################
	-->
	<!-- Verify that everything in the global namespace is prefixed with a theme specific prefix. -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<property name="prefixes" type="array">
				<element value="caweb_"/>
				<element value="et_"/>
				<element value="wp_"/>
			</property>
		</properties>
	</rule>

	<!-- Verify that the text_domain is set to the desired text-domain. -->
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="caweb-divi-modules"/>
				<element value="CAWeb"/>
				<element value="Divi"/>
				<element value="et_builder"/>
				<element value="et-core"/>
			</property>
		</properties>
	</rule>

	<!-- Allow for theme specific exceptions to the file name rules based
		 on the theme hierarchy. -->
	<rule ref="WordPress.Files.FileName">
		<properties>
			<property name="is_theme" value="true"/>
			<property name="custom_test_classes" type="array">
				<element value="ET_Builder_CAWeb_Module"/>
			</property>
		</properties>
	</rule>

	<!--
		Excludes obfuscation group of discouraged functions.
		functions: base64_decode, base64_encode, convert_uudecode, convert_uuencode, str_rot13
		https://github.com/WordPress/WordPress-Coding-Standards/blob/3.0.0/WordPress/Sniffs/PHP/DiscouragedPHPFunctionsSniff.php#L87
	-->
	<rule ref="WordPress.PHP.DiscouragedPHPFunctions">
		<properties>
			<property name="exclude" type="array">
				<element value="obfuscation"/>
			</property>
		</properties>
	</rule>
	
	<!-- 
		Verifies that all array assignment operators in a multi-line, multi-statement array are aligned.
		https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#wordpressarraysmultiplestatementalignment-allow-for-new-lines
	-->
	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<properties>
			<!-- No need to adjust alignment of large arrays when the item with the largest key is removed. -->
			<property name="exact" value="false"/>
			<!-- Don't align multi-line items if ALL items in the array are multi-line. -->
			<property name="alignMultilineItems" value="!=100"/>
			<!-- Array assignment operator should always be on the same line as the array key. -->
			<property name="ignoreNewlines" value="false"/>
		</properties>
	</rule>

	<!--
	#############################################################################
	USE THE PHPCompatibilityWP RULESET
	#############################################################################
	-->

    <rule ref="PHPCompatibilityWP">
        <include-pattern>*\.php$</include-pattern>
    </rule>

	<!--
	#############################################################################
	USE THE PHPCompatibility RULESET
	#############################################################################
	-->
    <rule ref="PHPCompatibility">
        <!-- Whitelist PHP native classes, interfaces, functions and constants which are back-filled by WP.

			 Based on:
			 * /wp-includes/compat.php
			 * /wp-includes/random_compat/random.php
		-->
        <include-pattern>*\.php$</include-pattern>
    </rule>
</ruleset>
